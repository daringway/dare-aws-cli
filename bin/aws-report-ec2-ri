#!/usr/bin/env python

import boto3
import sys
import math
import csv
import datetime
import pytz

# TODO add cli option parser
# TODO add unit option for COMPUTE or XLARGE
# TODO add percent of instances on a RI based on instance count
# TODO add percent of instances on a RI based units
# TODO add multi region support to scan all regions

verbose = False
csvOutput = False
maximize='balance'
# maximize='flexbility'
# maximize='fixed'

# Convert the xlarge normalized units to AWS Normalizations
awsUnitMultiplier = 8

ec2_age_threshold = datetime.timedelta(days=14)


if len(sys.argv) > 1 and sys.argv[1] == '--detail':
    verbose = True
if len(sys.argv) > 1 and sys.argv[1] == '--csv':
    csvOutput = True

ec2 = boto3.client('ec2')

# dict by RI type (category - platform)
#   RI type
#     list of RIs
#     list of unreserved instances
#

ActiveFilter = [ {'Name': 'state', 'Values': ['active']}]
reserved = ec2.describe_reserved_instances( Filters= ActiveFilter )

RunFilter = [{'Name':'instance-state-name', 'Values': ['running']}]
running = ec2.describe_instances( Filters = RunFilter )

accountid = boto3.client('sts').get_caller_identity()['Account']

sizeMap = {
    'nano':      0.03125,
    'micro':     0.0625,
    'small':     0.125,
    'medium':    0.25,
    'large':     0.5,
    'xlarge':    1.0,
    '2xlarge':   2.0,
    '4xlarge':   4.0,
    '8xlarge':   8.0,
    '10xlarge': 10.0,
    '16xlarge': 16.0,
    '32xlarge': 32.0
}

maxSize = {
    't2': 8,
    'm4': 16,
    'm3': 2,
    'c4': 8,
    'c3': 8,
    'x1': 32,
    'r4': 16,
    'r3': 8,
    'p2': 16,
    'g2': 8,
    'f1': 16,
    'i3': 16,
    'd2': 8,
    'i2': 4
}
upgradeTypes = {
    't1': 't2',
    'm1': 'm3',
    'c1': 'c3',
    'hi1': 'i3',
    'm2': 'r3',
    'cr1': 'r3',
    'hs1': 'd2'
}

class ReservedInstance(object):
    def __init__(self, res):
        self.instanceType = res['InstanceType']
        self.category = str(self.instanceType.split('.')[0])
        self.sizeName = str(self.instanceType.split('.')[1])
        self.where = 'Region'
        if res['Scope'] == 'Availability Zone':
            self.where = res['AvailabilityZone']
        self.allocated = []
        self.capacity = sizeMap[self.sizeName]
        self.size = sizeMap[self.sizeName]
        self.id = res['ReservedInstancesId']
        self.platform = res['ProductDescription']

    def addToBucket(self, instance):
        if (self.platform == instance.platform) and (self.category == instance.category) :
            if self.where == 'Region' or (self.where == instance.where):
                if self.platform == 'Windows':
                    if self.capacity == instance.size:
                        self.capacity = 0
                        self.allocated.append(instance.instanceType)
                        return True
                else:
                    if instance.size <= self.capacity:
                        self.capacity = self.capacity - instance.size
                        self.allocated.append(instance.instanceType)
                        return True
        return False

    def __eq__(self, other):
        if self.where != other.where:
            return False
        if self.platform != other.platform:
            return False
        if self.where != other.where:
            return False
        if self.instanceType != other.instanceType:
            return False
        if self.size != other.size:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __lt__(self, other):
        if self.platform != other.platform:
            return self.platform < other.platform
        elif self.instanceType != other.instanceType:
            return self.instanceType < other.instanceType
        elif self.where != other.where:
            if self.where == 'Region':
                return True
            return self.where < other.where
        elif self.size != other.size:
            return self.size < other.size
        else:
            return self.capacity < other.capacity

    def report(self, notReserveInstanceCount):
        if self.capacity == 0:
            return "RI %s %s %s is full %s" % (self.instanceType, self.platform, self.where, self.allocated)
        elif self.capacity == self.size:
            if (notReserveInstanceCount > 0) and (self.capacity > notReserveInstanceCount) and (self.platform == "Linux/UNIX"):
                return "Change RI %s %s %s to Region type, needed capacity %s" % (self.instanceType, self.platform, self.where, notReserveInstanceCount)
            elif (notReserveInstanceCount > 0) and (self.capacity == notReserveInstanceCount) and (self.platform == "Windows"):
                return "Change RI %s %s %s to Region type, needed capacity %s" % (self.instanceType, self.platform, self.where, notReserveInstanceCount)
            else:
                return "Use/Sell RI %s %s %s is unused" % (self.instanceType, self.platform, self.where)
        else:
            return "Utilize  RI %s %s %s remaining capacity %0.1f-xlarge %s" % (self.instanceType, self.platform, self.where, self.capacity, self.allocated)


class Instance(object):
    def __init__(self, instance):

        self.instanceType = instance['InstanceType']
        self.category = self.instanceType.split('.')[0]
        self.sizeName = self.instanceType.split('.')[1]
        self.size = sizeMap[self.sizeName]
        self.instanceId = instance['InstanceId']
        self.where = instance['Placement']['AvailabilityZone']

        if instance.has_key('Platform'):
            if instance['Platform'] == 'windows':
                self.platform = 'Windows'
            else:
                self.platform = instance['Platform']
        else:
            self.platform = 'Linux/UNIX'

    def __eq__(self, other):
        if self.platform != other.platform:
            return False
        if self.instanceType != other.instanceType:
            return False
        if self.size != other.size:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __lt__(self, other):
        if self.platform != other.platform:
            return self.platform < other.platform
        if self.instanceType != other.instanceType:
            return self.instanceType < other.instanceType
        elif self.size != other.size:
            return self.size < other.size

    def __repr__(self):
        return "%s %s %s" % (self.instanceType, self.platform, self.size)


class NotReservedType(object):
    def __init__(self, instance):
        self.count = 0
        self.neededCapacity = 0
        self.typeCount = {}
        self.platform = instance.platform
        self.category = instance.category
        self.instances = []
        self.increase(instance)

        if upgradeTypes.has_key(self.category):
            self.upgrade = True
        else:
            self.upgrade = False

    def __eq__(self, other):
        if self.upgrade != other.upgrade:
            return False
        if self.platform != other.platform:
            return False
        if self.category != other.category:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __lt__(self, other):
        if self.upgrade != other.upgrade:
            return self.upgrade < other.upgrade
        if self.platform != other.platform:
            return self.platform < other.platform
        else:
            return self.category < other.category

    def increase(self, instance):
        self.count = self.count + 1
        self.neededCapacity = self.neededCapacity + instance.size
        self.typeCount[instance.instanceType] = self.typeCount.get(instance.instanceType, 0) + 1
        self.instances.append(instance)


    def getCounts(self):
        counts = []
        for key in self.typeCount.keys():
            counts.append("%s x %s" % (self.typeCount[key], key))
        return counts

    def __repr__(self):
        countStr = ', '.join(self.getCounts())

        if self.upgrade:
            return "Upgrade Instances %s %s types to %s before reserving for [%s]" % (self.category, self.platform, upgradeTypes[self.category], countStr)
        else:
            max = maxSize[self.category]
            if ( maximize == 'flexbility'):
                howmany = int(math.ceil(self.neededCapacity / max))
                return "Purchase RI %s %s %s %sxlarge for [%s]" % (self.category, self.platform, howmany, max, countStr)
            elif (maximize == 'fixed'):
                return "Purchase RI %s %s %s" % (self.category, self.platform, countStr)
            else:
                # maximize balanced
                count = int(self.neededCapacity / max)
                leftover = self.neededCapacity % max

                # if count > 0:
                #     print "Reserve", count, cat, 'of capacity', max, 'xlarge'
                # if leftover > 0:
                #     print "Reserve", 1, cat, 'of capacity', cap, 'xlarge'

                return "Purchase RI %s %s %3i x %sxlarge and %3.3f xlarge for [%s]" % (self.category, self.platform, count, max, leftover, countStr)


class NotReservedDict(dict):
    def increase(self, inst):
        index = inst.platform + " " + inst.category

        if self.has_key(index):
            self[index].increase(inst)
        else:
            self[index] = NotReservedType(inst)

    def needReservation(self, category, platform):
        for notreserved in self.values():
            if (notreserved.category == category) and (notreserved.platform == platform):
                return notreserved.neededCapacity
        return 0

notReserved = NotReservedDict()
reservedBuckets2 = []
instances2 = []


# Load Data
for res in reserved['ReservedInstances']:
    rcount = res['InstanceCount']
    rtype = res['InstanceType']
    category = str(rtype.split('.')[0])
    sizeName = str(rtype.split('.')[1])
    where = 'Region'
    if res['Scope'] == 'Availability Zone':
        where = res['AvailabilityZone']
    for x in range(0, rcount):
        reservedBuckets2.append( ReservedInstance(res))

for reservation in running["Reservations"]:
    for inst in reservation["Instances"]:
        # Want to skip new EC2 instances.
        if inst['LaunchTime'] + ec2_age_threshold < datetime.datetime.now(pytz.timezone("UTC")):
            instances2.append(Instance(inst))

reservedBuckets2.sort(reverse=True)  # Small to Large
instances2.sort(reverse=False)  # Large to Small

for inst in instances2:
    instanceReserved = False
    for res in reservedBuckets2:
        if res.addToBucket(inst):
            instanceReserved = True
            break
    if instanceReserved == False:
        notReserved.increase(inst)

if csvOutput:
    fieldnames=['Account', 'State', 'RI', 'Platform', 'XL Capacity', 'Used', 'Remaining', 'Allocated']
    csvOut = csv.DictWriter(sys.stdout, fieldnames=fieldnames, delimiter=',')
    csvOut.writeheader()

reservedUnits = 0
unreservedUnits = 0
reservedCount = 0
unreservedCount = 0
for platform in ['Linux/UNIX', 'Windows']:
    for cat in upgradeTypes.keys() + maxSize.keys():

        for notr in sorted(notReserved.values()):
            if (cat == notr.category) and (platform == notr.platform):
                unreservedUnits += notr.neededCapacity
                unreservedCount += 1
                if csvOutput:
                    values = {
                        'Account': accountid,
                        'RI': notr.category,
                        'Platform': notr.platform,
                        'Allocated': notr.getCounts()
                        }
                    if notr.upgrade:
                        values['State'] = 'Upgrade'
                    else:
                        values['State'] = 'Reserve'
                        values['XL Capacity'] = notr.neededCapacity

                        csvOut.writerow(values)
                else:
                    print notr

        for res in reservedBuckets2:
            if (cat == res.category) and (platform == res.platform):
                reservedUnits += res.size
                reservedCount += 1
                if csvOutput:
                    max = sizeMap[res.sizeName]
                    used = max - res.capacity
                    values = {
                        'Account': accountid,
                        'State': 'RI',
                        'RI': res.instanceType,
                        'Platform': res.platform,
                        'XL Capacity': max,
                        'Used': used,
                        'Remaining': res.capacity,
                        'Allocated': res.allocated
                    }
                    csvOut.writerow(values)
                else:
                    # for platform in ['Linux/UNIX', 'Windows']:
                    capacityNeed = notReserved.needReservation(cat, platform)
                    if verbose:
                        print res.report(capacityNeed)
                    elif res.capacity > 0:
                        print res.report(capacityNeed)


print ""
print "reserved instance count  ", reservedCount
print "unreserved instance count", unreservedCount
print "reserved xlarge Units: ", reservedUnits
print "unreserved xlargeUnits:", unreservedUnits
